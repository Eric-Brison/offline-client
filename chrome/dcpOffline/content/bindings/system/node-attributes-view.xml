<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE bindings [
      <!ENTITY % node-attributes-bindingDTD SYSTEM "chrome://dcpoffline/locale/bindings/node-attributes-binding.dtd" >
      <!ENTITY systemBindingsDirPath "chrome://dcpoffline/content/bindings/system" >
      <!ENTITY separator "&#160;:&#160;" >
      %node-attributes-bindingDTD;
]>
<bindings id="node-attributes-binding" xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl"
>
    <binding id="node-attr-view" extends="&systemBindingsDirPath;/base-attributes.xml#base-attr"/>

    <binding id="tab-attr-view" extends="&systemBindingsDirPath;/node-attributes-view.xml#node-attr-view">
        <content>
            <xul:tabpanel anonid="tabPanel" flex="1">
                <xul:vbox flex="1">
                    <xbl:children />
                </xul:vbox>
            </xul:tabpanel>
        </content>
        <implementation>
            <field name="tabbox" readonly="true"><![CDATA[
                var parent = this.parentNode;
                while (parent) {
                    if (parent.localName == "tabbox")
                        break;
                    parent = parent.parentNode;
                }
                parent;
            ]]></field>
            <constructor><![CDATA[
                var tabs, tab, id;
                if (this.tabbox) {
                    tabs = this.tabbox.tabs;

                    id = Components.classes["@mozilla.org/uuid-generator;1"]
                            .getService(Components.interfaces.nsIUUIDGenerator)
                            .generateUUID()
                            .toString()
                            .slice(1,-1);
                    this.setAttribute('id', id);

                    if (tabs) {
                       // be carreful : constructors are called in inverse order of dom order
                        tab = tabs.insertItemAt(0,this.getAttribute('label'),this.getAttribute('label'));
                        tab.setAttribute('linkedpanel', id);
                        tab.setAttribute('attrid', this.getAttribute('attrid'));
                        tab.setAttribute('tooltiptext', this.getAttribute('label'));
                        tab.setAttribute('visibility', this.getAttribute('visibility'));
                    } else {
                        Components.utils.import("resource://modules/exceptions.jsm");
                        logError(new BindError("there is no 'tabs' tag associated with this tab: " + this.getAttribute("attrid")));
                    }
                }
            ]]></constructor>
        </implementation>
    </binding>
    <binding id="frame-attr-view" extends="&systemBindingsDirPath;/node-attributes-view.xml#node-attr-view">
        <content>
            <xul:groupbox class="dcpFrame" flex="1">
                <xul:caption anonid="label" class="dcpLabel" xbl:inherits="label" />
                <children />
            </xul:groupbox>
        </content>
    </binding>
    <binding id="array-attr-view" inheritstyle="true" extends="&systemBindingsDirPath;/node-attributes-view.xml#node-attr-view">
        <resources>
            <stylesheet src="chrome://dcpoffline/content/bindings/system/dcpoffline-array-system.css" />
        </resources>
        <content>
            <xul:groupbox class="dcpAttribute array" flex="1">
                <xul:caption anonid="caption" xbl:inherits="label"/>
                <xul:grid flex="1" inherited="attrid">
                    <xul:columns anonid="columns"/>
                    <xul:rows anonid="rows"/>
                </xul:grid>
            </xul:groupbox>
            <xul:box style="display: none;">
                <children/>
            </xul:box>
        </content>
        <implementation>
            <constructor><![CDATA[
                    Components.utils.import("resource://modules/logger.jsm");

                    var i, r, length, tbody, childNodes, arrayRowLength, headerRow, rows, columns,
                            currentColumn, columnFlex, currentLabel, currentNode, currentVisibility, currentRow, currentAttribute;

                    tbody = this.getChild('tableBody');
                    childNodes = this.childNodes;
                    arrayRowLength = 0;
                    headerRow = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "row");
                    rows = this.getChild('rows');
                    columns = this.getChild('columns');

                    for (i = 0, length = childNodes.length; i < length; i++) {
                        currentNode = childNodes[i];

                        /* Generate label line */
                        currentLabel = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "label");
                        currentLabel.setAttribute('value', currentNode.getAttribute('label'));
                        currentLabel.setAttribute('tooltiptext', currentNode.getAttribute('label'));
                        currentLabel.setAttribute('visibility', currentNode.getAttribute('visibility'));
                        currentLabel.classList.add('header');
                        currentLabel.classList.add('plain');
                        headerRow.appendChild(currentLabel);

                        /*Generate column content */
                        currentColumn = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "column");
                        columnFlex = childNodes[i].getAttribute('flex');
                        currentColumn.setAttribute('flex', columnFlex ? columnFlex : 1);
                        currentColumn.setAttribute('attrid', childNodes[i].getAttribute('attrid'));
                        currentVisibility = currentNode.getAttribute('visibility');
                        if (currentVisibility === 'H') {
                            currentColumn.setAttribute("collapsed", true);
                        }
                        columns .appendChild(currentColumn);

                        arrayRowLength = Math.max(arrayRowLength, this.doc.getValue(currentNode.getAttribute('attrid')).length);
                    }

                    rows.appendChild(headerRow);

                    for (i = 0; i < arrayRowLength; i++) {
                        currentRow = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "row");

                        for ( r = 0; r < childNodes.length; r++) {
                            currentAttribute = childNodes[r].cloneNode(true);
                            currentAttribute.setAttribute('index', i);

                            currentRow.appendChild(currentAttribute);
                        }
                        rows.appendChild(currentRow);
                    }

                ]]></constructor>
        </implementation>
    </binding>
</bindings>